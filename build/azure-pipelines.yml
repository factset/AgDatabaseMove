trigger:
  branches:
    exclude:
    - '*'
  tags:
    include: 
    - v*
pr:
- 'master'

jobs:
  - job: Build
    pool:
      vmImage: 'windows-latest'
    strategy:
      matrix:
        Release:
          BuildConfiguration: Release
        Debug:
          BuildConfiguration: Debug

    steps:
    - task: UseDotNet@2
      displayName: 'Use dotnet 2.0'
      inputs:
        packageType: sdk
        version: 2.0.x
        installationPath: $(Agent.ToolsDirectory)/dotnet
    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
      displayName: Restore
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        arguments: "-c $(BuildConfiguration)"
      displayName: Build
    # Using this task publishes the test results to Azure Pipelines
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        arguments: "-c $(BuildConfiguration)"
        projects: tests/AgDatabaseMove.Unit
        nobuild: true
      displayName: Test
    - powershell: |
        ("$(Build.SourceBranch)" -match "(refs/tags/v)(.*)") -and ($env:VersionNumber = $Matches[2])
        Write-Host "##vso[task.setvariable variable=VersionNumber]$env:VersionNumber"
      displayName: 'Extract version from git tag'
    # Nuget pack does not work with dotnet standard packages
    - task: DotNetCoreCLI@2
      condition: ne(variables['VersionNumber'], '')
      displayName: 'dotnet pack'
      inputs:
        command: 'pack'
        packagesToPack: src/AgDatabaseMove.csproj
        versioningScheme: byEnvVar
        versionEnvVar: VersionNumber
    # DotNet push doesn't work with encrypted api keys
    - task: NuGetCommand@2
      displayName: 'NuGet push'
      condition: and(ne(variables['VersionNumber'], ''), eq(variables['BuildConfiguration'], 'Release'))
      inputs:
        command: 'push'
        nuGetFeedType: 'external'
        # Service Connection - at project level
        publishFeedCredentials: 'FactSet Nuget'

  - job: CodeCleanup
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: NuGetToolInstaller@0
    - powershell: |
        dotnet restore
        nuget install JetBrains.ReSharper.CommandLineTools
        Get-ChildItem -Recurse -Path './*/cleanupcode.exe' | ForEach { &$_.Fullname /config="cleanupcode.config" }
        git diff --exit-code -- . ':(exclude)AgDatabaseMove.sln.DotSettings'
      displayName: ReSharper Code Cleanup
